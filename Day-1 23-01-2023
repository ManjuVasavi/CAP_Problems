//longest substring without repeating characters

class Solution {

    public int lengthOfLongestSubstring(String s) {

        int p=0;

        int q=0;

        int max_len=0;

        HashMap<Character,Integer> hmap =new HashMap<>();

        while(q<s.length()){

             //char cur=s.charAt(q);

            if(hmap.containsKey(s.charAt(q))){

                while(hmap.containsKey(s.charAt(q))){

                    hmap.remove(s.charAt(p));

                    p+=1;

                }

            }

            else{

                hmap.put(s.charAt(q),1);

                q=q+1;

            }

            max_len=Integer.max(max_len,q-p);

        }

        return max_len;

    }
}


//First unique character in a string


class Solution {

    public int firstUniqChar(String s) {

        HashMap<Character,Integer> hmap=new HashMap<Character,Integer>();

                for(int i=0;i<s.length();i++){

                    if(hmap.containsKey(s.charAt(i))){

                        int b=hmap.get(s.charAt(i));

                        hmap.put(s.charAt(i),b+1);

                    }

                    else

                    hmap.put(s.charAt(i),1);

                }

                for(int i=0;i<s.length();i++){

                    if(hmap.get(s.charAt(i))==1)

                        return i;

                }

                return -1;

    }

}
