//symmetric tree
class Solution {
    int f=1;
    public void post(TreeNode p,TreeNode q){
        if(p==null && q==null){return ;}
        if(p==null && q!=null){
            f=0;
            return;
        }
        if(p!=null && q==null){
            f=0;
            return;
        }
            post(p.left,q.right);
            post(p.right,q.left);
            System.out.println(p.val);
                        System.out.println(q.val);
            if(p.val!=q.val){
                f=0;
            }
    }
    
    public boolean isSymmetric(TreeNode root) {
        post(root.left,root.right);
        if(f==1){
            return true;
        }
        else{
            return false;
        }
}
}

//same tree
class Solution {
    int f=1;
    public void post(TreeNode p,TreeNode q){
        if(p==null && q==null){return ;}
        if(p==null && q!=null){
            f=0;
            return;
        }
        if(p!=null && q==null){
            f=0;
            return;
        }
            post(p.left,q.left);
            post(p.right,q.right);
            System.out.println(p.val);
                        System.out.println(q.val);
            if(p.val!=q.val){
                f=0;
            }
    }
    public boolean isSameTree(TreeNode p, TreeNode q) {
        post(p,q);
        if(f==0){
            return false;
        }
        else{
            return true;
        }
    }
}

//Binary tree postorder traversal
class Solution {
    List<Integer> l1=new ArrayList<Integer>();
    public List<Integer> postorderTraversal(TreeNode root) {
        if(root!=null){
            recur(root);
        }
        return l1;
    }
    public void recur(TreeNode p){
        if(p.left!=null)
            recur(p.left);
        if(p.right!=null)
            recur(p.right);
        l1.add(p.val);
    }
}

//Binary tree inorder traversal
class Solution {
    ArrayList<Integer> l=new ArrayList<>();
    public void ino(TreeNode root){
        if(root==null){return;}
        ino(root.left);
        l.add(root.val);
        ino(root.right);
    }
    public List<Integer> inorderTraversal(TreeNode root) {
        ino(root);
        return l;
    }
}

//Binary tree preorder traversal
class Solution {
    ArrayList<Integer> l=new ArrayList<>();
    public void pre(TreeNode root){
        if(root==null){return;}
        l.add(root.val);
        pre(root.left);
        pre(root.right);
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        pre(root);
        return l;
    }
}



//Maximum depth of binary tree
class Solution {
    public int depth(TreeNode root){
        if(root==null){
            return 0;
        }
        int left=depth(root.left);
        int right=depth(root.right);
        return Integer.max(left,right)+1;
    }
    public int maxDepth(TreeNode root) {
        return depth(root);
    }
}

//Root equals sum of children
class Solution {
    public boolean checkTree(TreeNode root) {
        if(root.val==(root.left.val+root.right.val)){
            return true;
        }
        else{
            return false;
        }
    }
}

